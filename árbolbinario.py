class Arbol: # Funciones privadas def init(self, dato): self.raiz = Nodo(dato) def agregar_recursivo(self, nodo, dato): if dato < nodo.dato: if nodo.izquierda is None: nodo.izquierda = Nodo(dato) else: self.agregar_recursivo(nodo.izquierda, dato) else: if nodo.derecha is None: nodo.derecha = Nodo(dato) else: self.agregar_recursivo(nodo.derecha, dato) def inorden_recursivo(self, nodo): if nodo is not None: self.inorden_recursivo(nodo.izquierda) print(nodo.dato, end=", ") self.inorden_recursivo(nodo.derecha) def preorden_recursivo(self, nodo): if nodo is not None: print(nodo.dato, end=", ") self.preorden_recursivo(nodo.izquierda) self.preorden_recursivo(nodo.derecha) def postorden_recursivo(self, nodo): if nodo is not None: self.postorden_recursivo(nodo.izquierda) self.postorden_recursivo(nodo.derecha) print(nodo.dato, end=", ") def buscar(self, nodo, busqueda): if nodo is None: return None if nodo.dato == busqueda: return nodo if busqueda < nodo.dato: return self.buscar(nodo.izquierda, busqueda) else: return self.buscar(nodo.derecha, busqueda) # Funciones públicas def agregar(self, dato): self.agregar_recursivo(self.raiz, dato) def inorden(self): print("Imprimiendo árbol inorden: ") self.inorden_recursivo(self.raiz) print("") def preorden(self): print("Imprimiendo árbol preorden: ") self.preorden_recursivo(self.raiz) print("") def postorden(self): print("Imprimiendo árbol postorden: ") self.postorden_recursivo(self.raiz) print("") def buscar(self, busqueda): return self.buscar(self.raiz, busqueda)
